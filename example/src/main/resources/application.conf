################################################
#      Evactor Twitter Example config file     #
################################################

evactor {

  collectors {
  
    twitter_collector {
      # CHANGE [TWITTER_USERNAME] AND [TWITTER_PASSWORD] TO YOUR OWN TWITTER CREDENTIALS!
      listener {
        class = org.evactor.twitter.listener.TwitterListener
        arguments = [ "https://stream.twitter.com/1/statuses/sample.json", "[TWITTER_USERNAME]", "[TWITTER_PASSWORD]" ]
      }
      transformer {
        class = org.evactor.twitter.transformer.TwitterJsonToStatusEvent
      }
      publication = { channel = "twitter" }
    }
    
  } 
  
  processors {
    
    # trending hashtag flow
    
    twitter_hashtag_filter {
      type = filter 
      subscriptions = [ {channel = "twitter"} ]
      publication = { channel = "twitter:hashtag", categories = { mvel = "hashtags" } }
      expression = { mvel = "hashtags == null || hashtags.size() == 0" }Â 
      accept = false
    }
    
    twitter_hashtag_trend {
      type = regressionAnalyser
      subscriptions = [ { channel = "twitter:hashtag" } ]
      publication = { channel = "twitter:hashtag:trending" }
      categorize = true
      coefficient = 1
      minSize = 25
      timeframe = 15 minutes
    }
    
    log_trending_hashtags {
      type = logProducer
      subscriptions = [ { channel = "twitter:hashtag:trending" } ]
      loglevel = INFO
    }
    
    # popular url's flow    
    twitter_rt_filter {
      type = filter
      subscriptions = [ {channel = "twitter"} ]
      publication = { channel = "twitter:rt" }
      expression = { mvel = "!message.startsWith('RT')" }
      accept = false
    }

    twitter_url_filter {
      type = filter
      subscriptions = [ {channel = "twitter:rt"} ]
      publication = { channel = "twitter:url", categories = { mvel = "urls"} }
      expression = { mvel = "urls == null || urls.size() == 0" }
      accept = false
    }
    
    twitter_url_popular {
      type = countAnalyser
      subscriptions = [ { channel = "twitter:rt" } ]
      publication = { channel = "twitter:url:popular" }
      categorize = true
      maxOccurrences = 5
      timeframe = 1 hour
    }
    
    log_popular_urls {
      type = logProducer
      subscriptions = [ { channel = "twitter:url:popular" } ]
      loglevel = INFO
    }
    
    # log #akka, #scala and #cassandra
    log_cool_hashtags {
      type = logProducer
      subscriptions = [ 
        { channel = "twitter:hashtag", category = "akka" },
        { channel = "twitter:hashtag", category = "scala" },
        { channel = "twitter:hashtag", category = "cassandra" }]
      loglevel = INFO
    }
    
  }
    
#  api {
#    port = 8080
#  }
  
#  monitoring {
#
#    implementation = "org.evactor.monitor.ostrich.OstrichMonitoring"
#
#    ostrich {
#      port = 8888
#    }
#  }
  
#  storage {
#      
#    implementation = "org.evactor.storage.cassandra.CassandraStorage"
#      
#    channels = ""
#    maxThreads = 10
#
#    cassandra {
#      hostname = "localhost"
#      port = 9160
#      clustername = "ClusterTest"
#      keyspace = "Evactor"
#    }
#  }
  
}

# akka stuff
akka {
  loglevel = INFO
}

